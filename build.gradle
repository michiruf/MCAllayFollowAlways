import de.michiruf.gradle.findversion.FindVersion

plugins {
    id 'java'
    id 'fabric-loom' version '1.10-SNAPSHOT'
}

apply from: 'build.allprojects.gradle'
apply from: 'build.versions.gradle'

def minecraftVersion = project.minecraftVersion as String ?: '1.19'
def minecraftVersionDefinition = ext.minecraftVersionDefinitions[minecraftVersion]
int targetJavaVersion = (int) minecraftVersionDefinition['java']
project.version = "${project.version}+${minecraftVersion}"

sourceSets {
    main.java.srcDirs = [
            'src/main/java',
            "src/message/${FindVersion.findClosestLowerOrEqualVersionInDirectory(file('src/message'), minecraftVersion)}",
            "src/allay/${FindVersion.findClosestLowerOrEqualVersionInDirectory(file('src/allay'), minecraftVersion)}",
            "src/fabric-teleport/${FindVersion.findClosestLowerOrEqualVersionInDirectory(file('src/fabric-teleport'), minecraftVersion)}"
    ]
}

dependencies {
    // Minecraft and fabric
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings "net.fabricmc:yarn:${minecraftVersionDefinition['mappings']}:v2"
    modImplementation "net.fabricmc:fabric-loader:${minecraftVersionDefinition['fabric']}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${minecraftVersionDefinition['fabricApi']}"

    // Tests
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}

processResources {
    var replaceProperties = [
            version  : project.version,
            minecraft: minecraftVersion,
            mappings : minecraftVersionDefinition['mappings'],
            fabric   : minecraftVersionDefinition['fabric'],
            fabricApi: minecraftVersionDefinition['fabricApi']
    ]
    inputs.properties replaceProperties
    filteringCharset 'UTF-8'
    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    // Enforce the specified java version
    it.sourceCompatibility = targetJavaVersion
    it.targetCompatibility = targetJavaVersion

    // Ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    it.options.release = targetJavaVersion
}

java {
    // Enforce the specified java version
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    testLogging {
        events 'passed'
    }
}
